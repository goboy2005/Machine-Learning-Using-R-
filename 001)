R Day 1 Problems

■ R 의 자료구조 

  1.  vector  :  같은 데이터 타입을 갖는 1차원 배열 구조 
  2.  matrix  :  같은 데이터 타입을 갖는 2차원 배열 구조 
  3.  array    :   같은 데이터 타입을 갖는 다차원 배열구조
  4. data.frame  : 각각의 데이터 타입을 갖는 컬럼으로 이루어진 2차원 배열구조
                        예:  rdbms 의 테이블과 유사하다.


■ Q-1 작업 디렉토리 설정 및 emp.csv 를 로드하는 방법

>  setwd("c:\\data")
>  getwd() 

 emp3.csv 를 c 드라이브 밑에 data 폴더 밑에 둔다.

> emp <-  read.csv("emp3.csv", header=T)
> emp


■ Q-2  emp.csv 를 리눅스에  /home/scott 올리고  emp.csv 를 로드해서 
emp 데이터 프레임을 만드시오 !

setwd("d:\\data")
emp <- read.csv("emp3.csv")
emp

■ Q-3.  emp 데이터 프레임에서 이름과 월급을 출력하시오 !

문법:  emp[ 행, 열 ]

emp[    ,  c("ename", "sal") ]
             ↑
        combine

■ Q-4.  월급이 3000 인 사원들의 이름과 월급을 출력하시오 !

문법: emp[ 행,  열 ]

emp[ emp$sal==3000, c("ename","sal") ]

■ Q-5.  월급이 2000 이상인 사원들의 이름과 월급을 출력하시오 !

답:  emp[emp$sal>=2000,c("ename","sal")]

■ Q-6. 직업이 SALESMAN 인 사원들의 이름과 월급과 직업을 출력하시오 !

답:  emp[ emp$job=='SALESMAN', c("ename", "sal", "job") ]

■ Q-7. 1981년 12월 11일에 입사한 사원들의 이름과 입사일을 출력하시오 !

답:  emp[emp$hiredate=='1981-12-11 0:00', c("ename","hiredate")]

■ Q-8. emp 데이터 프레임의 구조를 확인하시오 !

str(emp)

'data.frame':	14 obs. of  9 variables:
 $ index   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ empno   : int  7839 7698 7782 7566 7654 7499 7844 7900 7521 7902 ...
 $ ename   : chr  "KING" "BLAKE" "CLARK" "JONES" ...
 $ job     : chr  "PRESIDENT" "MANAGER" "MANAGER" "MANAGER" ...
 $ mgr     : int  NA 7839 7839 7839 7698 7698 7698 7698 7698 7566 ...
 $ hiredate: chr  "1981-11-17 0:00" "1981-05-01 0:00" "1981-05-09 0:00" "1981-04-01 0:00" ...
 $ sal     : int  5000 2850 2450 2975 1250 1600 1500 950 1250 3000 ...
 $ comm    : int  NA NA NA NA 1400 300

설명: emp 데이터 프레임의 hiredate 가 chr (문자형) 이므로 검색할 때 문자 그대로
검색하면 됩니다. 

■ Q-9.  아래의 SQL을 R 로 구현하시오 !

SQL> select  ename || ' 의 직업은 ' ||  job
         from emp;

답:  paste(  emp$ename, ' 의 직업은 ', emp$job)

1. data.table 패키지를 설치한다.
install.packages("data.table")


■ Q-10. 직업이 SALESMAN, ANALYST 인 사원들의 이름과 월급과 직업을 출력하시오

문법:  emp[ 행,  열 ]

답: emp[ emp$job %in%  c("SALESMAN","ANALYST"), c("ename","sal", "job") ]

■ Q-11. 직업이 SALESMAN, ANALYST 가 아닌 사원들의 이름과 월급과 직업을
출력하시오 !

답: emp[ ! emp$job %in%  c("SALESMAN","ANALYST"), c("ename","sal", "job") ]

■ Q-12. 부서번호가 10번, 20번인 사원들의 이름과 월급과 부서번호를 출력하시오!

답:  emp[ emp$deptno  %in%  c(10,20), c("ename", "sal", "deptno")  ]

■ Q-13.  커미션이 null 인 사원들의 이름과 월급과 커미션을 출력하시오 !

답 :  emp[ is.na(emp$comm),  c("ename", "sal", "comm") ]

설명: 1. NA (결손값) -------->  is.na()
          2. NaN (비수치) --------> is.nan()
                      ↓
          Not  a Number 
 
       3. NULL (아무것도 없다) -----> is.null()

설명:  머신러닝 학습시에는 결손값을 다른 값으로 대체하는것 이 아주 중요합니다.

■ Q-14. 커미션이 NA 가 아닌 사원들의 이름과 월급과 커미션을 출력하시오 !

답:  emp[ ! is.na(emp$comm),  c("ename", "sal", "comm") ]


■ Q-15. 월급이 1000 에서 3000 사이인 사원들의 이름과 월급을 출력하시오 !

SQL> SELECT  ename, sal
          from  emp
         where  sal  between  1000  and 3000;

답:  emp[ emp$sal >= 1000  &  emp$sal <= 3000 , c("ename", "sal") ]

> str(emp$sal)
 int [1:14] 5000 2850 2450 2975 1250 1600 1500 950 1250 3000 ...

■ Q-16. 월급이 1000 에서 3000 사이가 아닌 사원들이 이름과 월급을 출력하시오 !

답:  emp[ ! ( emp$sal >= 1000  &  emp$sal <= 3000 ), c("ename", "sal") ]

■ Q-17. 이름의 첫번째 철자가 A 로 시작하는 사원들의 이름과 월급을 출력하시오 !

답:  emp[ grep("^A", emp$ename) , c("ename", "sal") ] 

설명: ^ 는 시작을 나타냅니다.

■ Q-18. 이름의 끝글자가 T 로 끝나는 사원들의 이름과 월급을 출력하시오 !

답:  emp[ grep("T$", emp$ename),  c("ename", "sal") ]

설명:  T 는 끝을 나타냅니다.  
       
■ Q-19. 이름의 두번째 철자가 M 인 사원들의 이름과 월급을 출력하시오 !

답:  emp[ grep("^.M", emp$ename), c("ename", "sal") ] 

설명:  점(.) 은 자릿수 하나 입니다.

■ Q-20. (점심시간 문제) 이름의 세번째 철자가 L 인 사원들의 이름과 월급을 
출력하시오 !



■ Q-21.  부서번호를 출력하는데 중복을 제거해서 출력하시오 

 library(data.table)
 data.table( "부서번호"=unique(emp$deptno)  )

■ Q-22.  직업을 출력하는데 중복을 제거해서 출력하시오 !

library(data.table)
data.table( "직업"=unique(emp$job)  )

■ 정렬 작업 

■ Q-23. 이름과 월급을 출력하는데 월급이 높은 사원부터 출력하시오 !

 답:  emp[ 행 , 열 ]
         emp[ order(emp$sal, decreasing=T), c("ename", "sal") ]

설명: dataframe 에 내장되어 있는 order 옵션을 사용하면 됩니다.

■ Q-24. 이름과 입사일을 출력하는데 먼저 입사한 사원부터 출력하시오 !

 답:  emp[ order(emp$hiredate, decreasing=F), c("ename", "hiredate") ]

■ Q-25.  직업이 SALESMAN 인 사원들의 이름과 월급과 직업을 출력하는데
월급이 높은 사원부터 출력하시오 !

답: Step 1.  직업이 SALESMAN 인 사원들의 이름과 월급을 출력해서 result 변수에 담기

       result <-  emp[ emp$job=='SALESMAN', c("ename", "sal", "job") ]

       Step 2.  result 변수의 월급을 높은 것부터 출력한다. 

        result[ order(result$sal, decreasing=T), c("ename", "sal", "job") ]

■ Q-26.  부서번호가 30번인 사원들의 이름과 월급과 입사일을 출력하는데
먼저 입사한 사원부터 출력하시오 !

 답:  result <-  emp[ emp$deptno == 30, c("ename", "sal", "hiredate") ]
         result[ order(result$hiredate , decreasing=F),      ]  

■ Q-27. doBy 패키지를 이용해서 이름과 월급을 출력하는데 월급이 높은것부터
 출력하시오 !

install.packages("doBy")
library(doBy)
orderby(~-sal, emp[     , c("ename","sal")] )

설명:  emp[     , c("ename","sal")]  이름과 월급을 출력하는 결과를 orderBy 함수에
         넣고 정렬하고자하는 컬럼 sal 앞에 ~ 물결을 사용해서 정렬을 하면  됩니다. 
         물결 다음에 마이너스(-) 를 붙여주면 높은것 부터 정렬됩니다. 

■ Q-28.  직업이 ANALYST 가 아닌 사원들의 이름과 월급과 직업을 출력하는데
 월급이 높은 사원부터 출력되게하시오 !
(doBy 패키지를 이용해서 하세요 ~ )

library(doBy)
orderBy( ~-sal,   emp[ emp$job !='ANALYST', c("ename", "sal", "job") ] )

■ Q-29. 범죄 발생요일(crime_day.csv) 를 R 로 로드해서 토요일에 발생하는 범죄유형, 범죄건수를 출력하는데 범죄건수가 높은것 부터 출력하시오 !

crime_day <- read.csv("crime_day.csv")
result <- crime_day[ crime_day$DAY=='SAT',  c("C_T", "CNT") ]
library(doBy)
orderBy(~-CNT, result ) 

■ 현재 R 에서 사용 되고 있는 result 와 같은 변수의 목록 확인방법

 ls()

■ 변수를 지우고 싶다면 ?

 rm(result)
 result 


■ Q-30. 살인이 일어나는 장소와 건수를 출력하는데 건수가 높은것 부터 출력하시오
( crime_loc.csv 를 R 로 로드하세요 ~)

crime_loc <- read.csv("crime_loc.csv")
head(crime_loc)
result <- crime_loc[ crime_loc$범죄=='살인', c("장소","건수") ]
library(doBy)
orderBy( ~-건수 , result ) 

■ Q-31. 강도가 일어나는 장소와 건수를 출력하는데 건수가 높은것 부터
출력하시오

crime_loc <- read.csv("crime_loc.csv")
head(crime_loc)
result <- crime_loc[ crime_loc$범죄=='강도', c("장소","건수") ]
library(doBy)
orderBy( ~-건수 , result )

■ Q-32.  이름과 직업을 출력하는데 소문자로 출력하시오 !

 library(data.table)
 data.table(이름=tolower(emp$ename), 직업=tolower(emp$job) )

■ Q-33. 이름을 출력하고 그 옆에 이름의 첫번째 철자부터 세번째 철자까지 출력되게 하시오 !

SQL> select  ename,  substr(ename, 1, 3)
               from   emp;

R>   library(data.table)
        data.table( 이름=emp$ename, 철자=substr(emp$ename,1,3)  )

설명:  substr( 변수, 시작, 끝 )

■ Q-34.  이름, 월급을 출력하는데 월급을 출력할 때에 숫자 0 을 * 로 출력하시오 

SQL> select  ename,  replace( sal, 0, '*' )
            from   emp;

R>  data.table( 이름=emp$ename, 월급= gsub( 0, '*', emp$sal)  ) 

설명: gsub(변경전, 변경후, 변수)

■ Q-35. 이름, 월급을 출력하는데 월급을 출력할 때에 숫자 0, 1, 2 를 * 로 출력하시오

SQL> select  ename, regexp_replace( sal, '[0-2], '*')
          from  emp;

R>  data.table(이름=emp$ename, 월급= gsub( '[0-2]', '*', emp$sal)  ) 


■ Q-36.  6의 9승을 출력하시오 !

답:  6^9

■ Q-37.  10을 3으로 나눈 나머지값을 출력하시오 !

답:   10%%3

■ Q-38. 이름과 연봉을 출력하는데 연봉은 월급의 12를 곱해서 출력하고
컬럼명은 둘다 한글로 이름, 연봉이라고 출력되게하시오 !

답:   data.table(이름=emp$ename, 연봉=emp$sal * 12 )

     이름     연봉
 1:   KING  60000
 2:  BLAKE  34200
 3:  CLARK  29400
 4:  JONES  35700

■ Q-39.  위의 결과를 다시 출력하는데 round 함수를 써서 백의 자리에서 반올림되게 하시오 ! ( 예:  35700 ----------> 36000 ) 

답:   data.table(이름=emp$ename, 연봉= round(emp$sal * 12, -3 )  )

     3  5  7  0  0   .   7  3  8
    -5 -4 -3 -2 -1  0  1  2  3 

■ Q-40. 위의 결과는 반올림을 한 것이고 반올림을 하지 않고 백자리 이후를
다 버려서 출력하시오 !

답:  trunc 는 소수점 이하만 버릴수 있다.
소수점 이전은 못버리므로 수행이 안됩니다.

data.table(이름=emp$ename, 연봉= trunc(emp$sal * 12, -3 )  )

※ 설명:  R 은 짝수를 좋아한다.

  round(122.5)  ---------->  122
  round(123.5)  ---------->  124 

 딱 중간에 있으면 짝수를 선택한다.
 
  122  ~  123 
   
  round(122.6)  ------------>   123

■ Q-41.  오늘날짜를 출력하시오 !

Sys.Date()  

■ Q-42. 이름, 입사한 날짜 부터 오늘까지 총 몇일 근무했는지 출력하시오 !
( 힌트 :  오라클   vs    R  )
     to_date      as.Date

SQL>  select  ename,  sysdate - hiredate
              from  emp;

R>  data.table( emp$ename,  Sys.Date() - as.Date(emp$hiredate ) )
                                      
■ Q-43. 오늘 날짜의 달의 마지막 날짜를 출력하시오 !

SQL> select  last_day( sysdate ) 
           from  dual;

R>  install.packages("lubridate")
      library(lubridate)
      ceiling_date( Sys.Date(), "months")  - days(1) 

설명:  오늘의 날짜의 달의 천장 날짜(다음달 1일의 날짜)
 floor_date( Sys.Date(),"months" )  ------------> 2021-01-01
 Sys.Date()                    ---------------->  2021-01-18
 ceiling_date( Sys.Date() ,"months") ---------->  2021-02-01

■ Q-44. 이름, 입사한 요일을 출력하시오 !

SQL> select  ename, to_char( hiredate, 'day')
           from   emp;

R>  data.table( emp$ename,  format( as.Date(emp$hiredate), '%A')  )

설명: format 의  옵션 
%A : 요일
%Y : 년도 4자리
%y :  년도 2자리 
%m : 달 
%d :  일 

■ Q-45.  11월에 입사한 사원들의 이름과 입사일을 출력하시오 !

SQL>  select  ename, hiredate
           from  emp
           where to_char(hiredate,'mm') = '11' ;

R>   emp[ format(as.Date(emp$hiredate),'%m')=='11', c("ename", "hiredate") ] 

■ Q-46. 오늘 부터 100달 뒤에 돌아오는 날짜를 출력하시오 !

SQL>   select  add_months( sysdate, 100 )
                  from  dual;

R>  Sys.Date() +  months(100)  

설명 :  days(숫자), months(숫자), years(숫자)  

■ Q-47.  오늘 부터 100달 뒤에 돌아오는 날짜의 요일을 출력하시오 !

SQL> select  to_char( add_months( sysdate, 100) , 'day')
              from  dual;

R>  format(  Sys.Date() +  months(100)  ,'%A' )

■ Q-48.  내가 무슨 요일에 태어났는지 출력하시오 !

SQL> select  to_char( to_date('1993/11/05','RRRR/MM/DD'), 'day')
              from  dual;

R>  format(  as.Date('1993/11/05') , '%A' )

■ Q-49.  이름, 월급, 등급을 출력하는데 월급이 1500 이상이면 등급을 A 로 출력하고
아니면 B 로 출력하시오 !

R>  data.table( emp$ename, emp$sal,  ifelse( emp$sal >= 1500, 'A', 'B')  )

설명:  ifelse 는 결측치 데이터를 다른 데이터로 대체할 때 아주 유용한 함수 입니다.
           머신러닝시에 모델이 학습할 때 좋은 학습 데이터를 제공 하기 위하여
            결측치에 값을 채워주는게 중요합니다. 

■ Q-50.  이름, 월급, 보너스를 출력하는데 보너스가
입사한 년도가 1980 년도이면 A 로 출력하고 
1981 년도이면 B 로 출력하고 
1982 년도이면 C 로 출력하고 
나머지 년도는 D 로 출력되게하시오 !

data.table( emp$ename, emp$sal, 
                   ifelse( format( as.Date(emp$hiredate),'%Y')=='1980', 'A',
                   ifelse( format( as.Date(emp$hiredate),'%Y')=='1981', 'B',
                   ifelse( format( as.Date(emp$hiredate),'%Y')=='1982', 'C' ,'D')   ) ) ) 

ifelse 하나 쓸때마다 가로가 필요하다.
                                   
■ Q-51. 신성이가 올린 리눅스 하둡 포트폴리오의 케글 데이터 중 student-mat.csv 를 내려받아서 R 로 로드하고 나이와 등급을 출력하는데
등급이 나이가  15 ~ 18 은 A , 19~20 은 B, 21~ 22은 C 로 출력하시오 !

setwd("c:\\data")
stu <- read.csv("student-mat.csv")

unique(stu$age)
data.table (stu$age, ifelse (stu$age >= 15 & stu$age <= 18,'A',
                          ifelse (stu$age >= 19 & stu$age <= 20,'B','C')))
