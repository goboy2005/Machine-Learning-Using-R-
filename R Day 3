
■ Q-107.   아래의 SQL 의 결과를 R 로 구현하시오 !

SQL>  select  ename, sal, deptno
            from  emp
           where  deptno  in  ( 10, 20 )
         union all
         select  ename, sal, deptno
           from  emp
           where  deptno = 20;

1. emp[ emp$deptno %in% c(10,20) , c("ename", "sal", "deptno") ]
2. emp[ emp$deptno==20 , c("ename", "sal", "deptno") ]
1+2 (위 아래) 

rbind(emp[ emp$deptno %in% c(10,20) , c("ename", "sal", "deptno") ], 
          emp[ emp$deptno==20 , c("ename", "sal", "deptno") ]  )

설명: rbind 는 두개의 결과를 위아래로 묶어서 출력하는 함수 

■ Q-108.  아래의 SQL 을 R 로 구현하시오 !

SQL>  select  job, sum(sal)
            from  emp
            group  by   job
         union  all
          select  null  as  job, sum(sal)
            from  emp;

답:   rbind( aggregate(sal~job,  emp, sum ),  c("   ",  sum(emp$sal)  )  )

■ Q-109.  아래의 SQL의 결과를 R 로 구현하시오 !

SQL>  SELECT  ename, sal, deptno
           from  emp
          where  deptno  in  ( 10, 20 )
          union 
         SELECT ename, sal, deptno
           from  emp
          where deptno = 10;


x <- unique(  rbind(emp[ emp$deptno %in% c(10,20) , c("ename", "sal", "deptno") ],  emp[ emp$deptno==20 , c("ename", "sal", "deptno") ]  )   )

library(doBy)
orderBy( ~ename, x )

■ Q-110. 아래의 SQL 의 결과를 R 로 구현하시오 !

SQL>  select  ename, sal, deptno
            from  emp
            where  deptno  in ( 10, 20 )
         minus 
         select  ename, sal, deptno
           from  emp
           where  deptno = 10;

setdiff(emp[ emp$deptno %in% c(10,20) , c("ename", "sal", "deptno") ], 
             emp[ emp$deptno==20 , c("ename", "sal", "deptno") ]  )

설명:  R 에 내장되어있는 setdiff 함수를 사용하면 안되고 dplyr 패키지의 setdiff 를이용해야 합니다.

install.packages("dplyr")
library(dplyr)

setdiff(emp[ emp$deptno %in% c(10,20) , c("ename", "sal", "deptno") ], 
                 emp[ emp$deptno==10 , c("ename", "sal", "deptno") ]  )

설명:  union 처럼 minus 도 데이터를 정렬을 하므로 
정렬된 결과로 출력하시오 !

x <-  setdiff(emp[ emp$deptno %in% c(10,20) , c("ename", "sal", "deptno") ], 
                     emp[ emp$deptno==10 , c("ename", "sal", "deptno") ]  )

library(doBy)
orderBy( ~ename,  x )

■ Q-111.  아래의 SQL의 결과를 R 로 구현하시오 !

SQL> select  ename, sal, deptno
          from  emp
          where  deptno  in  ( 10, 20 )
       intersect 
        select  ename, sal, deptno
          from  emp
          where  deptno = 10;

R> 
x <-  intersect( emp[ emp$deptno %in% c(10,20) , c("ename", "sal", "deptno") ], 
                        emp[ emp$deptno==10 , c("ename", "sal", "deptno") ]  )

library(doBy)
orderBy( ~ename,  x )

■ SQL의 서브쿼리를 R 로 구현하기 

* 오라클의 서브쿼리의 종류 3가지 

    1.  단일행 서브쿼리
    2.  다중행 서브쿼리
    3.  다중 컬럼 서브쿼리 

■ Q-112.  JONES 의 월급보다 더 많은 월급을 받는 사원들의 이름과 월급을 출력 하시오 !

SQL>  select  ename, sal
           from emp 
           where  sal >  ( select  sal
                                  from  emp
                                  where ename='JONES');

R>  jones_sal <-  emp[ emp$ename=='JONES', c("sal") ]
      jones_sal
      emp[ emp$sal > jones_sal , c("ename", "sal") ] 

■ Q-113. 아래의 SQL 을 R 로 구현하시오 !

SQL> select  ename, sal
           from  emp
             where  sal =  ( select  max(sal)
                                 from   emp  );  

max_sal <- max(emp[ ,"sal"])

emp[emp$sal==max_sal,c("ename","sal")]

■ Q-114. 전국에서 등록금이 가장 비싼 학교이름과 등록금을
출력하시오 !

univ <- read.csv("전국_대학별등록금통계_현황.csv")
head(univ)

univ_max <- max(univ$등록금)
univ[ univ$등록금 == univ_max , c("학교명", "등록금") ]

■ Q-115. KING 에게 보고하는 사원들의 이름과 월급을 출력하시오 !

SQL> select  ename, sal
           from  emp
           where  mgr = ( select  empno
                                   from  emp
                                   where  ename='KING');

R> king_empno <-  emp[ emp$ename=='KING', "empno" ]
R> emp[ emp$mgr == king_empno, c("ename", "sal") ] 

   ename  sal
NA  <NA>   NA  <----  이 부분을 제거하려면 ?  na.omit 을 사용 
2  BLAKE 2850
3  CLARK 2450
4  JONES 2975

R> na.omit( emp[ emp$mgr == king_empno, c("ename", "sal") ] )

■ Q-116.  관리자인 사원들의 이름을 출력하시오 !

SQL>  select  ename
            from  emp
             where   empno  in  ( select  mgr 
                                            from  emp );

설명:  관리자번호(mgr) 가 사원번호인 사원들을 출력 

R>  library(data.table)
R>  data.table( 이름=emp[ emp$empno %in%  emp$mgr  , "ename" ] )

■ Q-117. 관리자가 아닌 사원들의 이름을 출력하시오 !

SQL> select  ename
          from  emp
          where   empno  not  in  ( select  mgr
                                                from   emp 
                                                where  mgr  is  not  null );

R>  data.table( 이름=emp[ ! emp$empno %in%  emp$mgr  , "ename" ] )

■ Q-118. 아파트에서 가장 많이 발생하는 범죄유형이 무엇인지 출력하시오 ! ( crime_loc.csv 를 사용)

crime_loc <- read.csv("crime_loc.csv")
head(crime_loc)

x <-  crime_loc[ crime_loc$장소=='아파트', c("범죄", "건수") ]
x [ x$건수 == max(x$건수),  ] 

■ Q-119. 지하철에서 가장 많이 발생하는 범죄유형이 무엇인지
출력하시오 !

crime_loc <- read.csv("crime_loc.csv")
x <-  crime_loc[ crime_loc$장소=='지하철', c("범죄", "건수") ]
x [ x$건수 == max(x$건수),  ] 

■ Q-120. 지하철에서 발생하는 범죄유형과 건수를 출력하는데 건수가 높은것부터 출력하시오 !

crime_loc <- read.csv("crime_loc.csv")
x <-  crime_loc[ crime_loc$장소=='지하철', c("범죄", "건수") ]

library(doBy)
orderBy( ~-건수, x)

■ Q-121. 위의 결과에서 첫번째 행만 출력하시오 !

crime_loc <- read.csv("crime_loc.csv")
x <-  crime_loc[ crime_loc$장소=='지하철', c("범죄", "건수") ]
library(doBy)
x2 <- orderBy( ~-건수, x)
x2[ 1, ]

■ Q-122.  문제120번 결과에서 첫번째 행부터 세번째 행까지 출력하시오 !

crime_loc <- read.csv("crime_loc.csv")
x <-  crime_loc[ crime_loc$장소=='지하철', c("범죄", "건수") ]
library(doBy)
x2 <- orderBy( ~-건수, x)
x2[ c(1:3) , ]

■ Q-123. 강력범죄가 가장 많이 발생하는 요일은 언제인가 ?
(crime_day.csv 를 이용 )

crime_day <-  read.csv("crime_day.csv")
crime_day[ crime_day$C_C=="강력범죄", ] 

설명:  trimws 함수 ---> 양쪽 공백 제거하는 함수 

x <- crime_day[ trimws(crime_day$C_C)=="강력범죄", ] 
library(doBy)
x2 <- orderBy( ~-CNT, x )
x2[ 1, "DAY" ] 

■ Q-124. (점심시간 문제)  살인기수가 많이 발생하는 요일을 1위부터 3위까지출력하시오 !

x<-(crime_day[ trimws( crime_day$C_T) == '살인기수' , ] ) #crime_day중 C_T  컬럼에서 `살인기수' 에 해당하는 값들만 출력

#자료양측에 있을 공백을 제거(trimws)
library(doBy)  #doBy 패키지 사용

x2<-orderBy(~-CNT,x) # CNT(건수) 크기가 큰 순으로 정렬하여 x2에 담는다.

x2[1:3, "DAY"] # x2에 담은 값에서 1~3 행만, 그중에서 "DAY"에 해당하는 값만 출력한다.

■ R 에서 순위를 출력하는 방법 

문법:  rank 함수 

예제:  이름, 월급,  월급에 대한 순위를 출력하시오 !

 data.table( 이름=emp$ename, 월급=emp$sal, 
                  순위= rank(-emp$sal, ties.method="min")  )

설명: rank 에 마이너스(-)를 사용하면 월급이 높은것부터 출력됩니다.
 ties.method 
 1. min :  오라클의 rank 와 같다
 2. first :  오라클의 rank 와 같은데 순위가 같은 데이터가 
 있으면 인덱스 순서가 먼저 나온 데이터를 높은 순위로 부여합니다. 
 3. max :  2등이 두명이면 둘다 3등으로 출력합니다.
                            
x <-  data.table( 이름=emp$ename, 월급=emp$sal, 
                          순위= rank(-emp$sal, ties.method="min")  )

library(doBy)
orderBy( ~ 순위, x ) 

※ 오라클의 dense_rank 와 같은 함수는 무엇인가 ?

SQL> select  ename, sal, dense_rank()  over ( order  by sal desc) 순위
           from  emp;

R> library(dplyr)
R> x <- data.table( 이름=emp$ename, 월급=emp$sal, 
                                  순위=dense_rank(-emp$sal)  ) 

R> library(doBy)
R> orderBy( ~순위, x )

■ Q-125.  월요일에 많이 발생하는 범죄, 건수, 순위를 출력하시오 ~
( crime_day.csv 를 이용하세요 )  

library(dplyr)
library(doBy)
crime_day <- read.csv("crime_day.csv")
c_mon <- crime_day[ crime_day$DAY=='MON', ]
head(crime_day)

x <- data.table( 범죄=c_mon$C_T, 건수=c_mon$CNT, 
                     순위= dense_rank(-c_mon$CNT)  )
orderBy(~순위, x ) 

■ Q-126. 여자들이 많이 걸리는 암과 그 건수와 순위를 출력하시오 !
( 암종이 모든암은 제외하는 조건을 주세요 ~)
 ( cancer2.csv 를 사용하세요 )

cancer2 <- read.csv("cancer2.csv")
head(cancer2)

c <- cancer2[ cancer2$성별=='여자' & cancer2$암종 !='모든암' ,    ]
c
View(c)
x <-  data.table( 암종=c$암종, 환자수=c$환자수,순위=dense_rank(-c$환자수) )
x2 <- orderBy( ~순위, x )
x3 <- unique(x2)
View(x3) 

■ R 로 막대 그래프 그리기 

 " 머신러닝 수업때와 케글에 데이터 분석시 사용하기 편하도록 함수로 만들어서 그래프 그리는것을 자동화 시키기 "

■ Q-127. emp 테이블의 월급으로 기본적인 막대 그래프를 그리시오 !

답:  barplot(emp$sal) 

■ Q-128. 위의 그래프의 제목을 Salary Bar Chart 라고 이름을 붙이시오 !

답:  barplot(emp$sal, main="Salary Bar Chart")

■ Q-129. 막대 그래프 x 축에 사원이름을 붙이시오 !

답:  barplot(emp$sal, main="Salary Bar Chart", names.arg= emp$ename) 

■ Q-130. 막대 그래프의 x축과 y축의 이름을 각각 이름, 월급 이라고 하시오 !

답:  barplot(emp$sal, main="Salary Bar Chart", names.arg= emp$ename,
         xlab="이름", ylab="월급" ) 

■ Q-131. 막대 그래프의 색깔을 파란색으로 출력하시오 !

답:  barplot(emp$sal, main="Salary Bar Chart", names.arg= emp$ename,
         xlab="이름", ylab="월급", col="Green Yellow", density=80 ) 

■ Q-132. 창업건수.csv 를 R 로 로드하고 치킨집의 창업건수를 막대그래프로 시각화 하시오 !  (데이터 게시판 50번 )

create_cnt  <- read.csv("창업건수.csv", header=T)
drop_cnt <- read.csv("폐업건수.csv",header=T)
create_cnt
Vie w(create_cnt)

barplot( create_cnt$치킨, main="년도별 치킨집 창업건수",
            names.arg=create_cnt$년도,  col="Green Yellow", density=80,
             ylim=c(0,1600)  )

■ Q-133. 치킨집의 폐업건수로 막대 그래프를 그리시오 !
( x 축은 년도 입니다. )

drop_cnt <- read.csv("폐업건수.csv",header=T)

barplot( drop_cnt$치킨, main="년도별 치킨집 폐업건수",
              names.arg=drop_cnt$년도,  col="Green Yellow", density=80,
             ylim=c(0,4000)  )

■ Q-134.  치킨집의 창업건수와 폐업건수를 같이 막대 그래프로 시각화 하시오!

create_cnt <- read.csv("창업건수.csv", header=T)
drop_cnt <- read.csv("폐업건수.csv", header=T)
x <- rbind( create_cnt$치킨집, drop_cnt$치킨집)
x

barplot( x , main="년도별 치킨집 폐업건수",
            names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") , 
            density=80, ylim=c(0,4000) , beside=T )

■ Q-135.  카페(커피음료) 가 얼마나 창업을 하고 얼마나 폐업을 
하는지 막대 그래프로

create_cnt <- read.csv("창업건수.csv", header=T)
drop_cnt <- read.csv("폐업건수.csv", header=T)
x <- rbind( create_cnt$커피음료, drop_cnt$커피음료)

barplot( x , main="년도별 카페 창업과 폐업건수",
              names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") , 
              density=80, ylim=c(0,4000) , beside=T )

■ Q-136.  위의 막대그래프를 앞으로 편하게 그릴 수 있도록 함수로 만들어서 실행되게 하시오 !

R 함수 생성 문법:

yys_auto <-  function() {
             create_cnt <- read.csv("창업건수.csv", header=T)
             drop_cnt <- read.csv("폐업건수.csv", header=T)
             x <- rbind( create_cnt$커피음료, drop_cnt$커피음료)

             barplot( x , main="년도별 카페 창업과 폐업건수",
             names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") , 
             density=80, ylim=c(0,4000) , beside=T )
                           }

yys_auto()

■ Q-137.   창업건수.csv 를 로드해서 치킨집의 창업건수를 막대 그래프로 
그리는 함수를 생성하시오 ~

a_bar <-  function()  {  
             create_cnt <- read.csv("창업건수.csv", header=T)

             barplot(create_cnt$치킨집 , main="치킨집 카페 창업건수",
             names.arg=create_cnt$년도,  col= "Green Yellow" , 
             density=80, ylim=c(0,1500) , beside=T )
                           }

a_bar() 

■ 원형 그래프 그리기 

■ Q-138.  사원 테이블의 월급을 원형 그래프로 그리시오 !

pie(emp$sal)

■ Q-139. 위의 그래프를 다시 그리는데 누구의 월급인지가 명시되게하시오 !

pie(emp$sal, main="Salary Pie Chart", labels=emp$ename, col=rainbow(15) )

■ Q-140. 위의 그래프의 월급에 비율을 붙여서 출력하시오 !

sal_labels <-  round( emp$sal / sum(emp$sal) * 100, 1) 
sal_labels 
sal_labels2 <- paste( emp$ename, sal_labels, '%')
sal_labels2 
pie(emp$sal, main="Salary Pie Chart", labels=sal_labels2, col=rainbow(15) )

■ R 에서 라인 그래프 그리기 

시간 순서에 따른 데이터의 변화를 볼때 유용한 그래프

■ Q-141. 아래의 데이터로 plot(점) 그래프를 그리시오 !

cars <-  c( 1, 3, 6, 4, 9 )
cars 
plot(cars)

■ Q-142. 위의 그래프에 파란색 선을 그리시오 !

cars <-  c( 1, 3, 6, 4, 9 )
cars 
plot(cars, type='o',  col='blue' )

설명:  type='o'  : 선을 그어라 ~

■ Q-143. 차와 트럭의 판매된 댓수를 라인 그래프로 시각화 하시오 !

cars <- c(1, 3, 6, 4, 9)
trucks <- c(2, 5, 4, 5, 12)

plot( cars, type='o', col='blue', ylim=c(0,12) )

# 그래프의 창을 닫지 말고 바로 이어서 아래의 코드를 실행

lines( trucks,  type='o', pch=22, lty=2, col='red')
설명:   pch= 21 : 동그라미 ,  lty =1 : 직선
              pch=22  : 네모 ,           lty = 2 : 점선 

■ Q-144. 가로축을  월, 화, 수, 목, 금으로 변경하시오 !

cars     <- c(1, 3, 6, 4, 9)
trucks   <- c(2, 5, 4, 5, 12)
plot( cars, type='o', col='blue', ylim=c(0,12), axes=FALSE, ann=FALSE )
lines( trucks,  type='o', pch=22, lty=2, col='red')

설명:  axes=FALSE : x 축과 y 축을 지워라 
          ann=FALSE  :  축이름을 지워라 

* 새로운 축을 생성하는 방법

axis( 1,  at=1:5,  lab=c("mon", "tue", "wed", "thu", "fri") )
      ↑
    x 축

axis(2)  # y 축 생성 

cars <- c(1, 3, 6, 4, 9)
trucks <- c(2, 5, 4, 5, 12)
plot( cars, type='o', col='blue', ylim=c(0,12), axes=FALSE, ann=FALSE )
lines( trucks,  type='o', pch=22, lty=2, col='red')
axis( 1,  at=1:5,  lab=c("mon", "tue", "wed", "thu", "fri") )
axis(2)  # y 축 생성 
legend( 2, 10, c('car', 'truck'), col=c('blue','red'), cex=0.8, pch=21:22, lty=1:2  ) 

설명: cex 는 글씨 크기, 레전드 안에 pch 21(동그라미), pch 22(네모), 
          lty  1(직선), lty 2(점선) 을 표시한다. 

■ Q-145. 치킨집의 창업건수를 이용해서 라인 그래프를 그리시오 !
x축을 연도로 두고 y축을 창업건수로 두고 만드시오 !

create_cnt <- read.csv("창업건수.csv", header=T)

plot( create_cnt$치킨집, type='o', col='blue', axes=FALSE, ann=FALSE )

axis( 1,  at=1:10,  lab= create_cnt$년도 )
axis(2)          # y 축 생성 

legend( 8, max(create_cnt$치킨집) , '창업' , col= 'blue', cex=0.8, pch=21, lty=1  ) 

■ Q-146. 치킨집의 창업건수와 폐업건수를 같이 출력되게 하시오 ! 
(라인 그래프로 그리시오 !)
                                                                       
create_cnt <- read.csv("창업건수.csv", header=T)
drop_cnt <- read.csv("폐업건수.csv", header=T)

plot( drop_cnt$치킨집, type='o', col='red', axes=FALSE, ann=FALSE, pch=22, lty=2 )
lines( create_cnt$치킨집, type='o', col='blue', pch=21, lty=1 )

axis( 1,  at=1:10,  lab= create_cnt$년도 )
axis(2)      # y 축 생성 

legend( 8, max(drop_cnt$치킨집) , c('폐업','창업') , col= c('red','blue'), cex=0.8,
          pch=22:21, lty=2:1  ) 


■ Q-147.  막대그래프, 원형 그래프, 라인 그래프 이렇게 
3가지를 그렸는데 이 세가지 그래프를 쉽게 실행할수 있도록 함수로 만드시오 

auto_bar()  : 창업/폐업 막대 그래프 실행 

auto_pie() :  사원 테이블의 월급 비율 원형 그래프 실행 

auto_line() :  창업/폐업 라인 그래프 실행 


a_bar <-  function()  {  
             
                 create_cnt <- read.csv("창업건수.csv", header=T)
             drop_cnt <- read.csv("폐업건수.csv", header=T)
             barplot( create$창업건수,col=rainbow(14)   )
                           }
